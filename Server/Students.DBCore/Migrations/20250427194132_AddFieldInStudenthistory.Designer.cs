// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Students.DBCore.Contexts;

#nullable disable

namespace Students.DBCore.Migrations
{
    [DbContext(typeof(PgContext))]
    [Migration("20250427194132_AddFieldInStudenthistory")]
    partial class AddFieldInStudenthistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Students.Models.DocumentRiseQualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("KindDocumentRiseQualificationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("KindDocumentRiseQualificationId");

                    b.ToTable("DocumentRiseQualifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b28d1f29-0aa9-4209-8bab-cd49a8ad548d"),
                            Date = new DateTime(2024, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KindDocumentRiseQualificationId = new Guid("f3963a72-8d77-47cc-85e5-0e46c1846f15"),
                            Number = "1"
                        },
                        new
                        {
                            Id = new Guid("5dde5f20-a247-45b5-b989-800a858d0b70"),
                            Date = new DateTime(2024, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KindDocumentRiseQualificationId = new Guid("aa7a8325-4b0d-4dd2-bedc-2c4a065ab332"),
                            Number = "2"
                        });
                });

            modelBuilder.Entity("Students.Models.EducationProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Cost")
                        .HasColumnType("double precision");

                    b.Property<Guid>("EducationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FEAProgramId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FinancingTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("HoursCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCollegeProgram")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDOTProgram")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFullDOTProgram")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsModularProgram")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNetworkProgram")
                        .HasColumnType("boolean");

                    b.Property<Guid>("KindDocumentRiseQualificationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EducationFormId");

                    b.HasIndex("FEAProgramId");

                    b.HasIndex("FinancingTypeId");

                    b.HasIndex("KindDocumentRiseQualificationId");

                    b.ToTable("EducationPrograms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b741f950-19b2-472c-bf66-e84bec7c0bb5"),
                            Cost = 0.0,
                            EducationFormId = new Guid("0241c1ac-bb5b-4ca1-bb46-89ba1e0c4287"),
                            FinancingTypeId = new Guid("0457cc26-6b4f-472b-bdbf-a9be3599e931"),
                            HoursCount = 250,
                            IsArchive = false,
                            IsCollegeProgram = false,
                            IsDOTProgram = false,
                            IsFullDOTProgram = false,
                            IsModularProgram = false,
                            IsNetworkProgram = false,
                            KindDocumentRiseQualificationId = new Guid("aa7a8325-4b0d-4dd2-bedc-2c4a065ab332"),
                            Name = "Академия цифра"
                        });
                });

            modelBuilder.Entity("Students.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EducationProgramId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EducationProgramId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a8cd57f-4afe-488b-ab0c-1a25519a2fd7"),
                            EducationProgramId = new Guid("b741f950-19b2-472c-bf66-e84bec7c0bb5"),
                            EndDate = new DateOnly(2025, 6, 1),
                            Name = "С42-019-10",
                            StartDate = new DateOnly(2024, 9, 1)
                        });
                });

            modelBuilder.Entity("Students.Models.GroupStudent", b =>
                {
                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("RequestId");

                    b.HasIndex("StudentId");

                    b.HasIndex("GroupId", "StudentId")
                        .IsUnique();

                    b.ToTable("GroupStudent", (string)null);

                    b.HasData(
                        new
                        {
                            RequestId = new Guid("4178e3fa-dca8-4e28-a815-46cfacb61fe5"),
                            GroupId = new Guid("9a8cd57f-4afe-488b-ab0c-1a25519a2fd7"),
                            StudentId = new Guid("c337e8c4-142a-4f01-a54f-fea1be3d874b")
                        },
                        new
                        {
                            RequestId = new Guid("7ecc61ae-2472-484e-8078-3b34f3448b8e"),
                            GroupId = new Guid("9a8cd57f-4afe-488b-ab0c-1a25519a2fd7"),
                            StudentId = new Guid("ce523bbd-dbd2-4bc6-8986-0f0c83926c57")
                        });
                });

            modelBuilder.Entity("Students.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("KindOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("KindOrderId");

                    b.HasIndex("RequestId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f6779b4-4e09-4f91-b7df-881205ea39d0"),
                            Date = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KindOrderId = new Guid("753df8b7-2d6f-4499-9f86-563771f016c1"),
                            Number = "42",
                            RequestId = new Guid("4178e3fa-dca8-4e28-a815-46cfacb61fe5")
                        });
                });

            modelBuilder.Entity("Students.Models.ReferenceModels.EducationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EducationForms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0241c1ac-bb5b-4ca1-bb46-89ba1e0c4287"),
                            Name = "Очная"
                        },
                        new
                        {
                            Id = new Guid("77c07268-346c-443c-8a21-9ba091c828fd"),
                            Name = "Очно-заочная"
                        },
                        new
                        {
                            Id = new Guid("9fd0638c-3976-42b0-8782-06ed3f9ca0db"),
                            Name = "Заочная"
                        });
                });

            modelBuilder.Entity("Students.Models.ReferenceModels.FEAProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FEAPrograms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8cc81b3a-3681-4bf8-bf1a-a62b1d1775fa"),
                            Name = "Сельское, лесное хозяйство, охота, рыболовство и рыбоводство"
                        },
                        new
                        {
                            Id = new Guid("57782aff-9f4c-4f83-a967-3229285bf140"),
                            Name = "Добыча полезных ископаемых"
                        },
                        new
                        {
                            Id = new Guid("bb4d092c-0a13-4e61-ad74-bab54565467a"),
                            Name = "Обрабатывающие производства"
                        },
                        new
                        {
                            Id = new Guid("42c8476f-62f7-461e-b059-f3c2edd38f40"),
                            Name = "Обеспечение электрической энергией, газом и паром; кондиционирование воздуха"
                        },
                        new
                        {
                            Id = new Guid("55fca356-ecd3-40ed-b2b3-6262d685f321"),
                            Name = "Водоснабжение, водоотведение, организация сбора и утилизации отходов, деятельность по ликвидации загрязнений"
                        },
                        new
                        {
                            Id = new Guid("2eaab406-6302-4707-be8b-f6de40bec96e"),
                            Name = "Строительство"
                        },
                        new
                        {
                            Id = new Guid("313349b3-c3d2-42af-add6-c5fc6fc5f238"),
                            Name = "Торговля оптовая и розничная; ремонт автотранспортных средств и мотоциклов"
                        },
                        new
                        {
                            Id = new Guid("07b93879-1903-4c4f-9b63-19cd9a357c79"),
                            Name = "Транспортировка и хранение"
                        },
                        new
                        {
                            Id = new Guid("c841a174-36b3-40b9-b96a-78e7f40db406"),
                            Name = "Деятельность гостиниц и предприятий общественного питания"
                        },
                        new
                        {
                            Id = new Guid("d6667aea-5077-491e-9fc6-75aba2b5c040"),
                            Name = "Деятельность в области информации и связи"
                        },
                        new
                        {
                            Id = new Guid("543ee5ea-587a-4ad3-9011-0e0040314112"),
                            Name = "Деятельность финансовая и страховая"
                        },
                        new
                        {
                            Id = new Guid("2e0a8801-529d-406a-8b06-09dee812f0fd"),
                            Name = "Деятельность по операциям с недвижимым имуществом"
                        },
                        new
                        {
                            Id = new Guid("a9ede175-ff97-49fa-a42a-d481a6e40008"),
                            Name = "Деятельность профессиональная, научная и техническая"
                        },
                        new
                        {
                            Id = new Guid("3620d6b8-e3dd-407b-8f22-9f73162c0f09"),
                            Name = "Деятельность административная и сопутствующие дополнительные услуги"
                        },
                        new
                        {
                            Id = new Guid("5b564193-b96a-4fd8-bfcd-f348e68694cb"),
                            Name = "Государственное управление и обеспечение военной безопасности; социальное обеспечение"
                        },
                        new
                        {
                            Id = new Guid("9a123e90-7122-49af-8e24-9aca964b39cb"),
                            Name = "Образование"
                        },
                        new
                        {
                            Id = new Guid("0a2720fe-6381-4920-9fc1-765487de0c53"),
                            Name = "Деятельность в области здравоохранения и социальных услуг"
                        },
                        new
                        {
                            Id = new Guid("ceff5624-b542-4a93-aca9-0ded3cde2146"),
                            Name = "Деятельность в области культуры, спорта, организации досуг и развлечений"
                        },
                        new
                        {
                            Id = new Guid("8a2953b7-d2f6-4bc8-813b-c0f4d1a928ae"),
                            Name = "Предоставление прочих видов услуг"
                        },
                        new
                        {
                            Id = new Guid("6977c645-b2de-453e-b0e1-75fed0f06986"),
                            Name = "Деятельность домашних хозяйств как работодателей; недифференцированная деятельность частных домашних хозяйств"
                        },
                        new
                        {
                            Id = new Guid("33869d2e-968b-4928-a485-bcb01b9821d2"),
                            Name = "Деятельность экстерриториальных организаций и органов"
                        });
                });

            modelBuilder.Entity("Students.Models.ReferenceModels.FinancingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SourceName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FinancingTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06784e4c-dc85-4f51-9ee4-c87d3e478db4"),
                            SourceName = "За счет бюджетных ассигнований федерального бюджета"
                        },
                        new
                        {
                            Id = new Guid("0457cc26-6b4f-472b-bdbf-a9be3599e931"),
                            SourceName = "За счет бюджетных ассигнований бюджетов субъектов РФ"
                        },
                        new
                        {
                            Id = new Guid("34de84cf-271d-4546-80f7-3a9a65b3830b"),
                            SourceName = "За счет бюджетных ассигнований местных бюджетов"
                        },
                        new
                        {
                            Id = new Guid("533020ac-b4ae-4d7c-a946-fa5ff0b95633"),
                            SourceName = "По договорам за счет средств физических лиц"
                        },
                        new
                        {
                            Id = new Guid("66d030a8-7441-4d40-840c-d5d44c3d634e"),
                            SourceName = "По договорам за счет средств юридических лиц "
                        },
                        new
                        {
                            Id = new Guid("1f155a86-9bd1-4cbe-bc5e-829171cfb92b"),
                            SourceName = "За счет собственных средств организации"
                        });
                });

            modelBuilder.Entity("Students.Models.ReferenceModels.KindDocumentRiseQualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("KindDocumentRiseQualifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3963a72-8d77-47cc-85e5-0e46c1846f15"),
                            Name = "Диплом о профессиональной переподготовке"
                        },
                        new
                        {
                            Id = new Guid("aa7a8325-4b0d-4dd2-bedc-2c4a065ab332"),
                            Name = "Удостоверение о повышении квалификации"
                        });
                });

            modelBuilder.Entity("Students.Models.ReferenceModels.KindOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("KindOrders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("753df8b7-2d6f-4499-9f86-563771f016c1"),
                            Name = "О зачислении"
                        },
                        new
                        {
                            Id = new Guid("c929e14d-e657-4b95-873c-0746f4edc68e"),
                            Name = "Об отчислении"
                        });
                });

            modelBuilder.Entity("Students.Models.ReferenceModels.ScopeOfActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("NameOfScope")
                        .HasColumnType("text");

                    b.Property<Guid?>("ScopeOfActivityParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ScopeOfActivityParentId");

                    b.ToTable("ScopesOfActivity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e768a213-0421-4c6f-85b8-0069882870c6"),
                            Level = 1,
                            NameOfScope = "Работники предприятий и организаций"
                        },
                        new
                        {
                            Id = new Guid("e1ab6e96-d9af-41c1-abca-61a1e5052a9e"),
                            Level = 1,
                            NameOfScope = "Работники образовательных организаций"
                        },
                        new
                        {
                            Id = new Guid("ed3df49f-e714-4940-a151-458616ee7d84"),
                            Level = 1,
                            NameOfScope = "Гос. Служащие"
                        },
                        new
                        {
                            Id = new Guid("5f450e00-d584-4736-882b-1b6ada2484bc"),
                            Level = 1,
                            NameOfScope = "Незанятые лица по направлению службы занятости"
                        },
                        new
                        {
                            Id = new Guid("a5e1e718-4747-47f4-b7c3-08e56bb7ea34"),
                            Level = 1,
                            NameOfScope = "Другие"
                        },
                        new
                        {
                            Id = new Guid("ca1c76a3-d268-4d06-8e4a-3721a4f2fb54"),
                            Level = 2,
                            NameOfScope = "Руководители предприятий и организаций",
                            ScopeOfActivityParentId = new Guid("e768a213-0421-4c6f-85b8-0069882870c6")
                        },
                        new
                        {
                            Id = new Guid("71e13148-a111-4c45-94b2-a920353d0571"),
                            Level = 2,
                            NameOfScope = "Руководители дошкольных образовательных организаций",
                            ScopeOfActivityParentId = new Guid("e1ab6e96-d9af-41c1-abca-61a1e5052a9e")
                        },
                        new
                        {
                            Id = new Guid("3af3138f-d487-4866-b8c3-b6e782bf1de8"),
                            Level = 2,
                            NameOfScope = "Руководители общеобразовательных организаций",
                            ScopeOfActivityParentId = new Guid("e1ab6e96-d9af-41c1-abca-61a1e5052a9e")
                        },
                        new
                        {
                            Id = new Guid("e94fff46-4a09-4c26-ad86-75219d0bc489"),
                            Level = 2,
                            NameOfScope = "Руководители профессиональных образовательных организаций",
                            ScopeOfActivityParentId = new Guid("e1ab6e96-d9af-41c1-abca-61a1e5052a9e")
                        },
                        new
                        {
                            Id = new Guid("b9115d04-3a42-42e3-8a74-61519f13a4e8"),
                            Level = 2,
                            NameOfScope = "Руководители образовательных организаций ВО",
                            ScopeOfActivityParentId = new Guid("e1ab6e96-d9af-41c1-abca-61a1e5052a9e")
                        },
                        new
                        {
                            Id = new Guid("d8b097c4-a4c3-447f-9ead-112312c25530"),
                            Level = 2,
                            NameOfScope = "Руководители организаций ДПО",
                            ScopeOfActivityParentId = new Guid("e1ab6e96-d9af-41c1-abca-61a1e5052a9e")
                        },
                        new
                        {
                            Id = new Guid("e060399a-c130-4ea9-901c-28f62cb7c532"),
                            Level = 2,
                            NameOfScope = "Руководители организаций дополнительного образования",
                            ScopeOfActivityParentId = new Guid("e1ab6e96-d9af-41c1-abca-61a1e5052a9e")
                        },
                        new
                        {
                            Id = new Guid("77fdb430-5b2f-4c64-8a1a-6728be169e1f"),
                            Level = 2,
                            NameOfScope = "Педагогические работники дошкольных образовательных организаций",
                            ScopeOfActivityParentId = new Guid("e1ab6e96-d9af-41c1-abca-61a1e5052a9e")
                        },
                        new
                        {
                            Id = new Guid("ac7b229f-97a0-4325-9e32-c3334c2c8939"),
                            Level = 2,
                            NameOfScope = "Педагогические работники общеобразовательных организаций",
                            ScopeOfActivityParentId = new Guid("e1ab6e96-d9af-41c1-abca-61a1e5052a9e")
                        },
                        new
                        {
                            Id = new Guid("197a368e-b704-44ed-81fa-c494537a0813"),
                            Level = 2,
                            NameOfScope = "Педагогические работники профессиональных образовательных организаций",
                            ScopeOfActivityParentId = new Guid("e1ab6e96-d9af-41c1-abca-61a1e5052a9e")
                        },
                        new
                        {
                            Id = new Guid("5b12db36-3fe2-4831-be2f-075c0bc08d63"),
                            Level = 2,
                            NameOfScope = "Педагогические работники образовательных организаций ВО",
                            ScopeOfActivityParentId = new Guid("e1ab6e96-d9af-41c1-abca-61a1e5052a9e")
                        },
                        new
                        {
                            Id = new Guid("d58399ce-b5f3-4d0d-8cb9-79419fc373dd"),
                            Level = 2,
                            NameOfScope = "Педагогические работники организаций ДПО",
                            ScopeOfActivityParentId = new Guid("e1ab6e96-d9af-41c1-abca-61a1e5052a9e")
                        },
                        new
                        {
                            Id = new Guid("ab739f86-1efe-4a5a-883c-ea6963d49e5e"),
                            Level = 2,
                            NameOfScope = "Педагогические работники организаций дополнительного образования",
                            ScopeOfActivityParentId = new Guid("e1ab6e96-d9af-41c1-abca-61a1e5052a9e")
                        },
                        new
                        {
                            Id = new Guid("fbd51db0-a7c0-4da0-9963-f5e668a13058"),
                            Level = 2,
                            NameOfScope = "Руководители гос.служащие",
                            ScopeOfActivityParentId = new Guid("ed3df49f-e714-4940-a151-458616ee7d84")
                        },
                        new
                        {
                            Id = new Guid("9b70f630-83bf-4805-b9c9-e0a96c0a39b2"),
                            Level = 2,
                            NameOfScope = "Безработные",
                            ScopeOfActivityParentId = new Guid("5f450e00-d584-4736-882b-1b6ada2484bc")
                        });
                });

            modelBuilder.Entity("Students.Models.ReferenceModels.StatusRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StatusRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2b3c504-1890-43f4-a351-22eea9b8dc08"),
                            Name = "Новая заявка"
                        },
                        new
                        {
                            Id = new Guid("e51930d7-b466-4188-8b50-7b0013d95a55"),
                            Name = "Вступительное испытание"
                        },
                        new
                        {
                            Id = new Guid("d8ae2c61-3cd5-410f-a182-10f8f03f1500"),
                            Name = "Не соответствует"
                        },
                        new
                        {
                            Id = new Guid("a8003ef9-b86d-4b63-9e41-d01720752b80"),
                            Name = "В архиве"
                        },
                        new
                        {
                            Id = new Guid("2d466d99-995c-473a-abcc-6260c6a2340a"),
                            Name = "Обучение"
                        },
                        new
                        {
                            Id = new Guid("f42bbf66-14e0-44aa-b15b-605994370ffb"),
                            Name = "Отчислен"
                        },
                        new
                        {
                            Id = new Guid("0daf618a-7a2f-4099-bbbb-e5323f9921f7"),
                            Name = "Завершил"
                        });
                });

            modelBuilder.Entity("Students.Models.ReferenceModels.StudentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StudentStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69b4aaff-b67f-483d-98e3-98d39da93d7a"),
                            Name = "Обучается"
                        },
                        new
                        {
                            Id = new Guid("cc2de503-af1c-4c9e-b228-6c4178217169"),
                            Name = "Отчислен"
                        },
                        new
                        {
                            Id = new Guid("fb1ec3f7-75a8-4a84-bdb6-db7a582e05ae"),
                            Name = "Окончил обучение"
                        });
                });

            modelBuilder.Entity("Students.Models.ReferenceModels.TypeEducation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeEducation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4f6d736-28e7-4a63-845e-24e62b433fc1"),
                            Name = "Высшее образование"
                        },
                        new
                        {
                            Id = new Guid("f87eaad5-5d84-45ce-b862-8da5c45ead5b"),
                            Name = "Среднее профессиональное образование"
                        },
                        new
                        {
                            Id = new Guid("5cca2c3c-85b9-41ac-bf0d-73ba0cbaa833"),
                            Name = "Студент ВО"
                        },
                        new
                        {
                            Id = new Guid("3b7bf44e-a9a1-46d6-aadc-7acff647d24f"),
                            Name = "Студент СПО"
                        });
                });

            modelBuilder.Entity("Students.Models.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Agreement")
                        .HasColumnType("boolean");

                    b.Property<string>("DataNumberDogovor")
                        .HasColumnType("text");

                    b.Property<Guid?>("DocumentRiseQualificationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EducationProgramId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsAlreadyStudied")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("text");

                    b.Property<int?>("StatusEntrancExams")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StatusRequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StudentStatusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentRiseQualificationId")
                        .IsUnique();

                    b.HasIndex("EducationProgramId");

                    b.HasIndex("StatusRequestId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentStatusId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4178e3fa-dca8-4e28-a815-46cfacb61fe5"),
                            Agreement = true,
                            DataNumberDogovor = "2024-09-01, 9876",
                            DocumentRiseQualificationId = new Guid("b28d1f29-0aa9-4209-8bab-cd49a8ad548d"),
                            EducationProgramId = new Guid("b741f950-19b2-472c-bf66-e84bec7c0bb5"),
                            Email = "iii@gmail.com",
                            Phone = "+7 (123) 456-78-90",
                            RegistrationNumber = "432",
                            StatusEntrancExams = 3,
                            StatusRequestId = new Guid("d2b3c504-1890-43f4-a351-22eea9b8dc08"),
                            StudentId = new Guid("c337e8c4-142a-4f01-a54f-fea1be3d874b"),
                            StudentStatusId = new Guid("69b4aaff-b67f-483d-98e3-98d39da93d7a")
                        },
                        new
                        {
                            Id = new Guid("7ecc61ae-2472-484e-8078-3b34f3448b8e"),
                            Agreement = true,
                            DataNumberDogovor = "2024-09-02, 9877",
                            DocumentRiseQualificationId = new Guid("5dde5f20-a247-45b5-b989-800a858d0b70"),
                            EducationProgramId = new Guid("b741f950-19b2-472c-bf66-e84bec7c0bb5"),
                            Email = "iai@gmail.com",
                            Phone = "+7 (123) 451-71-90",
                            RegistrationNumber = "432",
                            StatusEntrancExams = 3,
                            StatusRequestId = new Guid("d2b3c504-1890-43f4-a351-22eea9b8dc08"),
                            StudentId = new Guid("ce523bbd-dbd2-4bc6-8986-0f0c83926c57"),
                            StudentStatusId = new Guid("69b4aaff-b67f-483d-98e3-98d39da93d7a")
                        });
                });

            modelBuilder.Entity("Students.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateTakeDiplom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Disability")
                        .HasColumnType("boolean");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text");

                    b.Property<string>("DocumentSeries")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullNameDocument")
                        .HasColumnType("text");

                    b.Property<string>("IT_Experience")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("Patron")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Projects")
                        .HasColumnType("text");

                    b.Property<string>("SNILS")
                        .HasColumnType("text");

                    b.Property<Guid>("ScopeOfActivityLevelOneId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScopeOfActivityLevelTwoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<string>("Speciality")
                        .HasColumnType("text");

                    b.Property<Guid?>("TypeEducationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("SNILS")
                        .IsUnique();

                    b.HasIndex("ScopeOfActivityLevelOneId");

                    b.HasIndex("ScopeOfActivityLevelTwoId");

                    b.HasIndex("TypeEducationId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c337e8c4-142a-4f01-a54f-fea1be3d874b"),
                            Address = "Проспект Сишарпа, 42",
                            BirthDate = new DateOnly(2003, 3, 3),
                            DateTakeDiplom = new DateTime(2077, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Disability = false,
                            Email = "iii@gmail.com",
                            Family = "Иванов",
                            FullNameDocument = "Иванов",
                            IT_Experience = "Есть",
                            Name = "Иван",
                            Nationality = "Россия",
                            Patron = "Иванович",
                            Phone = "+7 (123) 453-78-90",
                            Projects = "Немало",
                            ScopeOfActivityLevelOneId = new Guid("e768a213-0421-4c6f-85b8-0069882870c6"),
                            Sex = 1,
                            Speciality = "Сварщик",
                            TypeEducationId = new Guid("a4f6d736-28e7-4a63-845e-24e62b433fc1")
                        },
                        new
                        {
                            Id = new Guid("ce523bbd-dbd2-4bc6-8986-0f0c83926c57"),
                            Address = "Проспект PHP, 47",
                            BirthDate = new DateOnly(2004, 4, 4),
                            DateTakeDiplom = new DateTime(2042, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Disability = false,
                            Email = "iai@gmail.com",
                            Family = "Иванова",
                            FullNameDocument = "Иванова",
                            IT_Experience = "Есть",
                            Name = "Анна",
                            Nationality = "Россия",
                            Patron = "Ивановна",
                            Phone = "+7 (123) 451-71-90",
                            Projects = "Мало",
                            ScopeOfActivityLevelOneId = new Guid("9b70f630-83bf-4805-b9c9-e0a96c0a39b2"),
                            Sex = 0,
                            Speciality = "HR",
                            TypeEducationId = new Guid("f87eaad5-5d84-45ce-b862-8da5c45ead5b")
                        });
                });

            modelBuilder.Entity("Students.Models.StudentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ChangeDate")
                        .HasColumnType("date");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LastChangedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("NewFamily")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NewName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NewPatron")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldFamily")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldPatron")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentHistory");
                });

            modelBuilder.Entity("Students.Models.DocumentRiseQualification", b =>
                {
                    b.HasOne("Students.Models.ReferenceModels.KindDocumentRiseQualification", "KindDocumentRiseQualification")
                        .WithMany()
                        .HasForeignKey("KindDocumentRiseQualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KindDocumentRiseQualification");
                });

            modelBuilder.Entity("Students.Models.EducationProgram", b =>
                {
                    b.HasOne("Students.Models.ReferenceModels.EducationForm", "EducationForm")
                        .WithMany()
                        .HasForeignKey("EducationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students.Models.ReferenceModels.FEAProgram", "FEAProgram")
                        .WithMany()
                        .HasForeignKey("FEAProgramId");

                    b.HasOne("Students.Models.ReferenceModels.FinancingType", "FinancingType")
                        .WithMany()
                        .HasForeignKey("FinancingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students.Models.ReferenceModels.KindDocumentRiseQualification", "KindDocumentRiseQualification")
                        .WithMany()
                        .HasForeignKey("KindDocumentRiseQualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationForm");

                    b.Navigation("FEAProgram");

                    b.Navigation("FinancingType");

                    b.Navigation("KindDocumentRiseQualification");
                });

            modelBuilder.Entity("Students.Models.Group", b =>
                {
                    b.HasOne("Students.Models.EducationProgram", "EducationProgram")
                        .WithMany("Groups")
                        .HasForeignKey("EducationProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationProgram");
                });

            modelBuilder.Entity("Students.Models.GroupStudent", b =>
                {
                    b.HasOne("Students.Models.Group", "Group")
                        .WithMany("GroupStudent")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students.Models.Request", "Request")
                        .WithOne("GroupStudent")
                        .HasForeignKey("Students.Models.GroupStudent", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students.Models.Student", "Student")
                        .WithMany("GroupStudent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Request");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Students.Models.Order", b =>
                {
                    b.HasOne("Students.Models.ReferenceModels.KindOrder", "KindOrder")
                        .WithMany()
                        .HasForeignKey("KindOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students.Models.Request", "Request")
                        .WithMany("Orders")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KindOrder");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Students.Models.ReferenceModels.ScopeOfActivity", b =>
                {
                    b.HasOne("Students.Models.ReferenceModels.ScopeOfActivity", "ScopeOfActivityParent")
                        .WithMany()
                        .HasForeignKey("ScopeOfActivityParentId");

                    b.Navigation("ScopeOfActivityParent");
                });

            modelBuilder.Entity("Students.Models.Request", b =>
                {
                    b.HasOne("Students.Models.DocumentRiseQualification", "DocumentRiseQualification")
                        .WithMany()
                        .HasForeignKey("DocumentRiseQualificationId");

                    b.HasOne("Students.Models.EducationProgram", "EducationProgram")
                        .WithMany()
                        .HasForeignKey("EducationProgramId");

                    b.HasOne("Students.Models.ReferenceModels.StatusRequest", "Status")
                        .WithMany()
                        .HasForeignKey("StatusRequestId");

                    b.HasOne("Students.Models.Student", "Student")
                        .WithMany("Requests")
                        .HasForeignKey("StudentId");

                    b.HasOne("Students.Models.ReferenceModels.StudentStatus", "StudentStatus")
                        .WithMany()
                        .HasForeignKey("StudentStatusId");

                    b.Navigation("DocumentRiseQualification");

                    b.Navigation("EducationProgram");

                    b.Navigation("Status");

                    b.Navigation("Student");

                    b.Navigation("StudentStatus");
                });

            modelBuilder.Entity("Students.Models.Student", b =>
                {
                    b.HasOne("Students.Models.ReferenceModels.ScopeOfActivity", "ScopeOfActivityLevelOne")
                        .WithMany()
                        .HasForeignKey("ScopeOfActivityLevelOneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students.Models.ReferenceModels.ScopeOfActivity", "ScopeOfActivityLevelTwo")
                        .WithMany()
                        .HasForeignKey("ScopeOfActivityLevelTwoId");

                    b.HasOne("Students.Models.ReferenceModels.TypeEducation", "TypeEducation")
                        .WithMany()
                        .HasForeignKey("TypeEducationId");

                    b.Navigation("ScopeOfActivityLevelOne");

                    b.Navigation("ScopeOfActivityLevelTwo");

                    b.Navigation("TypeEducation");
                });

            modelBuilder.Entity("Students.Models.StudentHistory", b =>
                {
                    b.HasOne("Students.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Students.Models.EducationProgram", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Students.Models.Group", b =>
                {
                    b.Navigation("GroupStudent");
                });

            modelBuilder.Entity("Students.Models.Request", b =>
                {
                    b.Navigation("GroupStudent");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Students.Models.Student", b =>
                {
                    b.Navigation("GroupStudent");

                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
