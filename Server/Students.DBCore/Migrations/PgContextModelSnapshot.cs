// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Students.DBCore.Contexts;

#nullable disable

namespace Students.DBCore.Migrations
{
    [DbContext(typeof(PgContext))]
    partial class PgContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Students.Models.DocumentRiseQualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("KindDocumentRiseQualificationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("KindDocumentRiseQualificationId");

                    b.ToTable("DocumentRiseQualification");
                });

            modelBuilder.Entity("Students.Models.EducationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EducationForms");
                });

            modelBuilder.Entity("Students.Models.EducationProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Cost")
                        .HasColumnType("double precision");

                    b.Property<Guid>("EducationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FEAProgramId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FinancingTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("HoursCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCollegeProgram")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDOTProgram")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFullDOTProgram")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsModularProgram")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNetworkProgram")
                        .HasColumnType("boolean");

                    b.Property<Guid>("KindDocumentRiseQualificationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EducationFormId");

                    b.HasIndex("FEAProgramId");

                    b.HasIndex("FinancingTypeId");

                    b.HasIndex("KindDocumentRiseQualificationId");

                    b.ToTable("EducationPrograms");
                });

            modelBuilder.Entity("Students.Models.FEAProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FEAPrograms");
                });

            modelBuilder.Entity("Students.Models.FinancingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SourceName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FinancingTypes");
                });

            modelBuilder.Entity("Students.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EducationProgramId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EducationProgramId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Students.Models.GroupStudent", b =>
                {
                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uuid");

                    b.HasKey("StudentsId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("GroupStudent", (string)null);
                });

            modelBuilder.Entity("Students.Models.KindDocumentRiseQualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("KindDocumentRiseQualifications");
                });

            modelBuilder.Entity("Students.Models.KindOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("KindOrders");
                });

            modelBuilder.Entity("Students.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("KindOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("KindOrderId");

                    b.HasIndex("RequestId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Students.Models.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DataNumberDogovor")
                        .HasColumnType("text");

                    b.Property<Guid?>("DocumentRiseQualificationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EducationProgramId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("text");

                    b.Property<int?>("StatusEntrancExams")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StatusRequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StudentStatusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentRiseQualificationId");

                    b.HasIndex("EducationProgramId");

                    b.HasIndex("StatusRequestId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentStatusId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Students.Models.ScopeOfActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("NameOfScope")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ScopesOfActivity");
                });

            modelBuilder.Entity("Students.Models.StatusRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StatusRequests");
                });

            modelBuilder.Entity("Students.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateTakeDiplom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Disability")
                        .HasColumnType("boolean");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text");

                    b.Property<string>("DocumentSeries")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullNameDocument")
                        .HasColumnType("text");

                    b.Property<string>("IT_Experience")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("Patron")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Projects")
                        .HasColumnType("text");

                    b.Property<string>("SNILS")
                        .HasColumnType("text");

                    b.Property<Guid>("ScopeOfActivityLevelOneId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScopeOfActivityLevelTwoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<string>("Speciality")
                        .HasColumnType("text");

                    b.Property<Guid?>("TypeEducationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ScopeOfActivityLevelOneId");

                    b.HasIndex("ScopeOfActivityLevelTwoId");

                    b.HasIndex("TypeEducationId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Students.Models.StudentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StudentStatuses");
                });

            modelBuilder.Entity("Students.Models.TypeEducation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeEducation");
                });

            modelBuilder.Entity("Students.Models.DocumentRiseQualification", b =>
                {
                    b.HasOne("Students.Models.KindDocumentRiseQualification", "KindDocumentRiseQualification")
                        .WithMany()
                        .HasForeignKey("KindDocumentRiseQualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KindDocumentRiseQualification");
                });

            modelBuilder.Entity("Students.Models.EducationProgram", b =>
                {
                    b.HasOne("Students.Models.EducationForm", "EducationForm")
                        .WithMany()
                        .HasForeignKey("EducationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students.Models.FEAProgram", "FEAProgram")
                        .WithMany()
                        .HasForeignKey("FEAProgramId");

                    b.HasOne("Students.Models.FinancingType", "FinancingType")
                        .WithMany()
                        .HasForeignKey("FinancingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students.Models.KindDocumentRiseQualification", "KindDocumentRiseQualification")
                        .WithMany()
                        .HasForeignKey("KindDocumentRiseQualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationForm");

                    b.Navigation("FEAProgram");

                    b.Navigation("FinancingType");

                    b.Navigation("KindDocumentRiseQualification");
                });

            modelBuilder.Entity("Students.Models.Group", b =>
                {
                    b.HasOne("Students.Models.EducationProgram", "EducationProgram")
                        .WithMany("Groups")
                        .HasForeignKey("EducationProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationProgram");
                });

            modelBuilder.Entity("Students.Models.GroupStudent", b =>
                {
                    b.HasOne("Students.Models.Group", "Group")
                        .WithMany("GroupStudent")
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students.Models.Student", "Student")
                        .WithMany("GroupStudent")
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Students.Models.Order", b =>
                {
                    b.HasOne("Students.Models.KindOrder", "KindOrder")
                        .WithMany()
                        .HasForeignKey("KindOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students.Models.Request", "Request")
                        .WithMany("Orders")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KindOrder");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Students.Models.Request", b =>
                {
                    b.HasOne("Students.Models.DocumentRiseQualification", "DocumentRiseQualification")
                        .WithMany()
                        .HasForeignKey("DocumentRiseQualificationId");

                    b.HasOne("Students.Models.EducationProgram", "EducationProgram")
                        .WithMany()
                        .HasForeignKey("EducationProgramId");

                    b.HasOne("Students.Models.StatusRequest", "Status")
                        .WithMany()
                        .HasForeignKey("StatusRequestId");

                    b.HasOne("Students.Models.Student", "Student")
                        .WithMany("Requests")
                        .HasForeignKey("StudentId");

                    b.HasOne("Students.Models.StudentStatus", "StudentStatus")
                        .WithMany()
                        .HasForeignKey("StudentStatusId");

                    b.Navigation("DocumentRiseQualification");

                    b.Navigation("EducationProgram");

                    b.Navigation("Status");

                    b.Navigation("Student");

                    b.Navigation("StudentStatus");
                });

            modelBuilder.Entity("Students.Models.Student", b =>
                {
                    b.HasOne("Students.Models.ScopeOfActivity", "ScopeOfActivityLevelOne")
                        .WithMany()
                        .HasForeignKey("ScopeOfActivityLevelOneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Students.Models.ScopeOfActivity", "ScopeOfActivityLevelTwo")
                        .WithMany()
                        .HasForeignKey("ScopeOfActivityLevelTwoId");

                    b.HasOne("Students.Models.TypeEducation", "TypeEducation")
                        .WithMany()
                        .HasForeignKey("TypeEducationId");

                    b.Navigation("ScopeOfActivityLevelOne");

                    b.Navigation("ScopeOfActivityLevelTwo");

                    b.Navigation("TypeEducation");
                });

            modelBuilder.Entity("Students.Models.EducationProgram", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Students.Models.Group", b =>
                {
                    b.Navigation("GroupStudent");
                });

            modelBuilder.Entity("Students.Models.Request", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Students.Models.Student", b =>
                {
                    b.Navigation("GroupStudent");

                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
